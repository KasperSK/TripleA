//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using CashRegister.Models;

namespace CashRegister.Sales
{
    using Orders;
    using Payment;
    using Receipts;
    using Database;
    using DAL;
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Controls sales
    /// </summary>
    public class SalesController : ISalesController
	{
		/// <summary>
		/// Hold the current order
		/// </summary>
		private SalesOrder CurrentOrder
		{
			get;
			set;
		}

		public virtual IReceiptController ReceiptController
		{
			get;
			set;
		}

		public virtual IOrderController OrderController
		{
			get;
			set;
		}

        /// <summary>
		/// Contructor - Calls StartNewOrder()
		/// </summary>
		public SalesController(IOrderController Ordercontroller, IReceiptController Receiptcontroller)
        {
            OrderController = Ordercontroller;
            ReceiptController = Receiptcontroller;
            StartNewOrder();
        }

	    /// <summary>
	    /// Returns the current order
	    /// </summary>
	  public virtual SalesOrder GetCurrentOrder()
	    {
	        return CurrentOrder;
	    }

        /// <summary>
        /// Add a product to an SalesOrder
        /// </summary>
        public virtual void AddProductToOrder(Product product)
		{
            // FIXME OrderLines
			// CurrentOrder.Products.Add(product);
		}

        /// <summary>
        /// Prints an order
        /// </summary>
        public virtual void CreateAndPrintReceipt(SalesOrder order)
	    {
	      var print= ReceiptController.CreateReceipt(order);
          ReceiptController.Print(print);
        }


        /// <summary>
        /// Remove a product from SalesOrder
        /// </summary>
        public virtual void RemoveProductFromOrder(Product product)
		{
            // FIXME OrderLines
            // CurrentOrder.Products.Remove(product);
		}

		/// <summary>
		/// clear SalesOrder
		/// </summary>
		public virtual void ClearOrder()
		{
		    SalesOrder tmp = CurrentOrder;
		    OrderController.ClearOrder(ref tmp);
		}

		/// <summary>
		/// Starts a new SalesOrder with a new id
		/// </summary>
		public virtual void StartNewOrder()
		{
		   CurrentOrder = OrderController.CreateOrder();
		}

	    

		/// <summary>
		/// Cancel transactions, clear SalesOrder
		/// </summary>
		public virtual void CancelOrder()
		{
		    foreach (var Transaktion in CurrentOrder.Transactions)
		    {
		        CurrentOrder.Transactions.Remove(Transaktion);
		    }

		    SalesOrder tmp = CurrentOrder;
            OrderController.ClearOrder(ref tmp);
            StartNewOrder();
		}

		/// <summary>
		/// Save an Order as incomplete
		/// </summary>
		public virtual void SaveIncompleteOrder()
		{
		  CurrentOrder.Status.Name = "Incomplete";
            OrderController.SaveOrder(CurrentOrder);
            StartNewOrder();
		}

	    /// <summary>
	    /// Starting payment on a SalesOrder
	    /// </summary>
	    public virtual void StartPayment(IPaymentProvidorDescriptor provider, long amountToPay)
	    {
	        if (amountToPay > MissingPaymenOnOrder())
	        {
	            Console.WriteLine("Amount Too Large");
	            throw new System.InvalidCastException();
	        }
	        PaymentController.CreateTransaction(amountToPay, "Bla", provider);
	        if (amountToPay == 0)
	        {
                CurrentOrder.Status.Name = "Complete";
	            OrderController.SaveOrder(CurrentOrder);
                StartNewOrder();
	        }
	    }

		/// <summary>
		/// Get info on the amount missing on the SalesOrder
		/// </summary>
		public virtual long MissingPaymenOnOrder()
		{
		   long missingAmount = OrderController.MissingAmount(CurrentOrder);
		   return missingAmount;
		}

		/// <summary>
		/// Adds an transaction to an order
		/// </summary>
		public virtual void AddTransaction(Models.Transaction trans)
		{
			CurrentOrder.Transactions.Add(trans);
		}

		/// <summary>
		/// Gets a list of all incomplete orders by default current data (or within a certain date or time)
		/// </summary>
		public virtual List<SalesOrder> GetIncompleteOrders(DateTime start, DateTime end)
		{
            List<SalesOrder> NewList = new List<SalesOrder>();
            SalesUnitOfWork SalesWork = new SalesUnitOfWork(new CashRegisterContext());
		    var Liste = SalesWork.SalesOrderRepository.Get(SalesOrder => SalesOrder.Status.Name == "Incomplete" );

		    foreach (SalesOrder order in Liste)
		    {
		        if (order.Date >= start && order.Date <= end)
                    NewList.Add(order);
		    }
            return NewList;
  
		}

	    /// <summary>
	    /// Get an incomplete order
	    /// </summary>
	    public virtual void RetrieveIncompleteOrder(int OrderId, DateTime Date1, DateTime Date2)
	    {

	        List<SalesOrder> ListOfIncompletes = GetIncompleteOrders(Date1, Date2);

	        foreach (SalesOrder orders in ListOfIncompletes)
	        {
	            if (OrderId == orders.Id)
	                CurrentOrder = orders;
	        }
	    }

	}

    public class PaymentController
    {
        public static void CreateTransaction(long amountToPay, string bla, IPaymentProvidorDescriptor provider)
        {
            throw new NotImplementedException();
        }
    }
}

